diff --git a/node_modules/react-native-fingerprint-scanner/android/src/main/java/com/hieuvp/fingerprint/ReactNativeFingerprintScannerModule.java b/node_modules/react-native-fingerprint-scanner/android/src/main/java/com/hieuvp/fingerprint/ReactNativeFingerprintScannerModule.java
index 28372f2..bcfcc25 100644
--- a/node_modules/react-native-fingerprint-scanner/android/src/main/java/com/hieuvp/fingerprint/ReactNativeFingerprintScannerModule.java
+++ b/node_modules/react-native-fingerprint-scanner/android/src/main/java/com/hieuvp/fingerprint/ReactNativeFingerprintScannerModule.java
@@ -115,7 +115,7 @@ public class ReactNativeFingerprintScannerModule
         return biometricPrompt;
     }
 
-    private void biometricAuthenticate(final String description, final Promise promise) {
+    private void biometricAuthenticate(final String description, final String negativeButtonText, final Promise promise) {
         UiThreadUtil.runOnUiThread(
             new Runnable() {
                 @Override
@@ -125,7 +125,7 @@ public class ReactNativeFingerprintScannerModule
                     PromptInfo promptInfo = new BiometricPrompt.PromptInfo.Builder()
                         .setDeviceCredentialAllowed(false)
                         .setConfirmationRequired(false)
-                        .setNegativeButtonText("Cancel")
+                        .setNegativeButtonText(negativeButtonText)
                         .setTitle(description)
                         .build();
 
@@ -188,7 +188,7 @@ public class ReactNativeFingerprintScannerModule
     }
 
     @ReactMethod
-    public void authenticate(String description, final Promise promise) {
+    public void authenticate(final String description, final String negativeButtonText, final Promise promise) {
         if (requiresLegacyAuthentication()) {
             legacyAuthenticate(promise);
         }
@@ -200,7 +200,7 @@ public class ReactNativeFingerprintScannerModule
                 return;
             }
 
-            biometricAuthenticate(description, promise);
+            biometricAuthenticate(description, negativeButtonText, promise);
         }
     }
 
diff --git a/node_modules/react-native-fingerprint-scanner/index.d.ts b/node_modules/react-native-fingerprint-scanner/index.d.ts
index e05866d..e7fcaa1 100644
--- a/node_modules/react-native-fingerprint-scanner/index.d.ts
+++ b/node_modules/react-native-fingerprint-scanner/index.d.ts
@@ -2,7 +2,11 @@ export type AuthenticateIOS = {
   description: string;
   fallbackEnabled: boolean;
 };
-export type AuthenticateAndroid = { onAttempt: (error: FingerprintScannerError) => void };
+export type AuthenticateAndroid = { onAttempt: (error: FingerprintScannerError) => void } | {
+  description: string;
+  negativeButtonText: string;
+  onAttempt: (error: FingerprintScannerError) => void
+};
 
 export type Biometrics = 'Touch ID' | 'Face ID' | 'Biometrics';
 
diff --git a/node_modules/react-native-fingerprint-scanner/src/authenticate.android.js b/node_modules/react-native-fingerprint-scanner/src/authenticate.android.js
index 439ab85..580960f 100644
--- a/node_modules/react-native-fingerprint-scanner/src/authenticate.android.js
+++ b/node_modules/react-native-fingerprint-scanner/src/authenticate.android.js
@@ -7,8 +7,8 @@ import createError from './createError';
 
 const { ReactNativeFingerprintScanner } = NativeModules;
 
-const authCurrent = (description, resolve, reject) => {
-  ReactNativeFingerprintScanner.authenticate(description)
+const authCurrent = (description, negativeButtonText, resolve, reject) => {
+  ReactNativeFingerprintScanner.authenticate(description, negativeButtonText)
     .then(() => {
       resolve(true);
     })
@@ -38,11 +38,14 @@ const authLegacy = (onAttempt, resolve, reject) => {
 
 const nullOnAttempt = () => null;
 
-export default ({ description, onAttempt }) => {
+export default ({ description, negativeButtonText, onAttempt }) => {
   return new Promise((resolve, reject) => {
     if (!description) {
       description = "Log In";
     }
+    if(!negativeButtonText){
+      negativeButtonText = "Cancel";
+    }
     if (!onAttempt) {
       onAttempt = nullOnAttempt;
     }
@@ -51,6 +54,6 @@ export default ({ description, onAttempt }) => {
       return authLegacy(onAttempt, resolve, reject);
     }
 
-    return authCurrent(description, resolve, reject);
+    return authCurrent(description, negativeButtonText, resolve, reject);
   });
 }
